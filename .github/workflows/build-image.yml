name: Build and Deploy

# on:
#   push:
#     branches:
#       - main
on: [pull_request]
    
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
        HOST: ${{ secrets.HOST }}
        USER_NAME: ${{ secrets.DB_USER }}
        PASSWORD: ${{ secrets.DB_PASSWORD }}
        DATABASE: ${{ secrets.DATABASE }}
        PKR_VAR_sql_user: ${{ secrets.DB_USER }}
        PKR_VAR_sql_password: ${{ secrets.DB_PASSWORD }}
        PORT: ${{ secrets.PORT}}


    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
      
      - name: Create .env file
        run: |
          touch .env
          echo "HOST=${{ secrets.HOST }}" > .env
          echo "USER_NAME=${{ secrets.DB_USER }}" >> .env
          echo "PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DATABASE=${{ secrets.DATABASE }}" >> .env
          echo "PORT= ${{ secrets.PORT}}" >> .env
      
      - name: Build application artifact
        run: zip -r webapp.zip ./
      
      - name: Install MySQL
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-server
          sudo /etc/init.d/mysql start
          sudo systemctl enable mysql
          sudo systemctl status mysql

      - name: Configure MySQL
        run: |
          sudo mysql --user=${{ secrets.DB_USER }} --password=${{ secrets.DB_PASSWORD }} --execute="CREATE DATABASE IF NOT EXISTS ${{ secrets.DATABASE }};"

      - name: Install Dependencies
        run: npm install

      - name: Run Integration Tests
        run: npm run test:integration

      # Authenticate with GCP using service account key
      - name: Set up Google Cloud SDK
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Install Packer
        uses: hashicorp/setup-packer@main

      - name: Build image
        run: |
          packer init -var "project_id=${{ secrets.GCP_PROJECT_ID }}" -var "zone=${{ secrets.ZONE }}" packer
          packer build -var "project_id=${{ secrets.GCP_PROJECT_ID }}" -var "zone=${{ secrets.ZONE }}" packer

      - name: Get image name
        id: extract-image-name
        run: |
          IMAGE_MANIFEST="./image_manifest.json"
          IMAGE_NAME=$(jq -r '.builds[-1].artifact_id' "$IMAGE_MANIFEST")
          echo "::set-output name=image_name::$IMAGE_NAME"

      - name: Generate timestamp
        id: timestamp
        run: echo "::set-output name=timestamp::$(date +%Y%m%d%H%M%S)"

      - name: Create instance template
        run: |
          gcloud compute instance-templates create $INSTANCE_TEMPLATE_NAME_PREFIX-${{ steps.timestamp.outputs.timestamp }} \
            --machine-type=$MACHINE_TYPE \
            --image=${{ steps.extract-image-name.outputs.image_name }} \
            --boot-disk-kms-key=projects/$PROJECT_ID/locations/$REGION/keyRings/$KEY_RING_NAME/cryptoKeys/$VM_KEY \
            --network-interface="network=$NETWORK,subnet=$SUBNET,network-tier=$NETWORK_TIER" \
            --tags=$TAGS \
            --region=$REGION \
            --instance-template-region=$INSTANCE_TEMPLATE_REGION \
            --boot-disk-size=$BOOT_DISK_SIZE \
            --boot-disk-type=$BOOT_DISK_TYPE \
            --service-account=$SERVICE_ACCOUNT \
            --scopes=$SCOPES \
            --metadata=startup-script="#!/bin/bash

            # content to overwrite .env file

            SCRIPT_CONTENT=\"
            HOST=$HOST
            USER_NAME=$USERNAME
            PASSWORD=$PASSWORD
            DATABASE=$DATABASE
            PORT=$PORT
            \"

            echo \"\$SCRIPT_CONTENT\" | sudo tee /home/csye6225/webapp/webapp_develop/.env > /dev/null"

        env:
          INSTANCE_TEMPLATE_NAME_PREFIX: ${{ secrets.INSTANCE_TEMPLATE_NAME_PREFIX }}
          MACHINE_TYPE: ${{ secrets.MACHINE_TYPE }}
          NETWORK_TIER: ${{ secrets.NETWORK_TIER }}
          IMAGE: ${{ secrets.IMAGE }}
          NETWORK: ${{ secrets.NETWORK }}
          SUBNET: ${{ secrets.SUBNET }}
          TAGS: ${{ secrets.TAGS }}
          REGION: ${{ secrets.REGION }}
          INSTANCE_TEMPLATE_REGION: ${{ secrets.REGION }}
          BOOT_DISK_SIZE: ${{ secrets.BOOT_DISK_SIZE }}
          BOOT_DISK_TYPE: ${{ secrets.BOOT_DISK_TYPE }}
          SERVICE_ACCOUNT: ${{ secrets.SERVICE_ACCOUNT }}
          SCOPES: ${{ secrets.SCOPES }}
          GROUP_NAME: ${{ secrets.GROUP_NAME }}
          HOST: ${{ secrets.SQL_HOST }}
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          USERNAME: ${{secrets.USERNAME}}
          PASSWORD: ${{secrets.PASSWORD}}
          DATABASE: ${{secrets.CLOUD_DATABASE}}
          PORT: ${{ secrets.PORT}}
          KEY_RING_NAME: test-key-ring
          VM_KEY: vm-key
      
      - name: Configure managed instance group with new template
        run: |
          gcloud compute instance-groups managed set-instance-template \
            $GROUP_NAME \
            --template=projects/$PROJECT_ID/regions/$REGION/instanceTemplates/webapp-instance-template-${{ steps.timestamp.outputs.timestamp }} \
            --region=$REGION
        env:
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          REGION: ${{ secrets.REGION }}

      - name: Start rolling update for managed instance group
        run: |
          gcloud compute instance-groups managed rolling-action start-update \
            $GROUP_NAME \
            --version=template=projects/$PROJECT_ID/regions/$REGION/instanceTemplates/webapp-instance-template-${{ steps.timestamp.outputs.timestamp }} \
            --region=$REGION \
            --type=proactive
        env:
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          REGION: ${{ secrets.REGION }}

      - name: Wait for managed instance group refresh
        run: |
          gcloud compute instance-groups managed wait-until \
          $GROUP_NAME \
          --version-target-reached \
          --region=$REGION
        env:
          GROUP_NAME: ${{ secrets.GROUP_NAME }}
          REGION: ${{ secrets.REGION }}