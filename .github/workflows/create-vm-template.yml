# name: Build Instance Template

# on: [pull_request]

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest

#     env:
#       INSTANCE_TEMPLATE_NAME_PREFIX: ${{ secrets.INSTANCE_TEMPLATE_NAME_PREFIX }}
#       MACHINE_TYPE: ${{ secrets.MACHINE_TYPE }}
#       NETWORK_TIER: ${{ secrets.NETWORK_TIER }}
#       IMAGE: ${{ secrets.IMAGE }}
#       NETWORK: ${{ secrets.NETWORK }}
#       SUBNET: ${{ secrets.SUBNET }}
#       TAGS: ${{ secrets.TAGS }}
#       REGION: ${{ secrets.REGION }}
#       INSTANCE_TEMPLATE_REGION: ${{ secrets.REGION }}
#       BOOT_DISK_SIZE: ${{ secrets.BOOT_DISK_SIZE }}
#       BOOT_DISK_TYPE: ${{ secrets.BOOT_DISK_TYPE }}
#       SERVICE_ACCOUNT: ${{ secrets.SERVICE_ACCOUNT }}
#       SCOPES: ${{ secrets.SCOPES }}
#       GROUP_NAME: ${{ secrets.GROUP_NAME }}
#       HOST: ${{ secrets.SQL_HOST }}
#       PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
#       USERNAME: ${{secrets.USERNAME}}
#       PASSWORD: ${{secrets.PASSWORD}}
#       DATABASE: ${{secrets.CLOUD_DATABASE}}
#       PORT: ${{ secrets.PORT}}

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up Node.js
#         uses: actions/setup-node@v2
#         with:
#           node-version: '18'
      
#       # Authenticate with GCP using service account key
#       - name: Set up Google Cloud SDK
#         uses: google-github-actions/auth@v2
#         with:
#           credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

#       - name: Generate timestamp
#         id: timestamp
#         run: echo "::set-output name=timestamp::$(date +%Y%m%d%H%M%S)"

#       - name: Create instance template
#         run: |
#           gcloud compute instance-templates create $INSTANCE_TEMPLATE_NAME_PREFIX-${{ steps.timestamp.outputs.timestamp }} \
#             --machine-type=$MACHINE_TYPE \
#             --image=$IMAGE \
#             --boot-disk-kms-key=projects/$PROJECT_ID/locations/$REGION/keyRings/test-key-ring/cryptoKeys/vm-key \
#             --network-interface="network=$NETWORK,subnet=$SUBNET,network-tier=$NETWORK_TIER" \
#             --tags=$TAGS \
#             --region=$REGION \
#             --instance-template-region=$INSTANCE_TEMPLATE_REGION \
#             --boot-disk-size=$BOOT_DISK_SIZE \
#             --boot-disk-type=$BOOT_DISK_TYPE \
#             --service-account=$SERVICE_ACCOUNT \
#             --scopes=$SCOPES \
#             --metadata=startup-script="#!/bin/bash

#             # content to overwrite .env file

#             SCRIPT_CONTENT=\"
#             HOST=$HOST
#             USER_NAME=$USERNAME
#             PASSWORD=$PASSWORD
#             DATABASE=$DATABASE
#             PORT=$PORT
#             \"

#             echo \"\$SCRIPT_CONTENT\" | sudo tee /home/csye6225/webapp/webapp_develop/.env > /dev/null"
      
#       - name: Configure managed instance group with new template
#         run: |
#           gcloud compute instance-groups managed set-instance-template \
#             $GROUP_NAME \
#             --template=projects/$PROJECT_ID/regions/$REGION/instanceTemplates/webapp-instance-template-${{ steps.timestamp.outputs.timestamp }} \
#             --region=$REGION

#       - name: Start rolling update for managed instance group
#         run: |
#           gcloud compute instance-groups managed rolling-action start-update \
#             $GROUP_NAME \
#             --version=template=projects/$PROJECT_ID/regions/$REGION/instanceTemplates/webapp-instance-template-${{ steps.timestamp.outputs.timestamp }} \
#             --region=$REGION \
#             --type=proactive
          

#       - name: Wait for managed instance group refresh
#         run: |
#           gcloud compute instance-groups managed wait-until \
#           $GROUP_NAME \
#           --version-target-reached \
#           --region=$REGION
