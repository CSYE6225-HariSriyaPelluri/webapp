name: Build Instance Template

on: [pull_request]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      INSTANCE_TEMPLATE_NAME_PREFIX: webapp-instance-template
      MACHINE_TYPE: e2-medium
      NETWORK_TIER: PREMIUM
      IMAGE: centos-image-2024-04-03-15-50-31
      NETWORK: cloud-test-vpc-5test
      SUBNET: webapp5test
      TAGS: webapp-route-tag
      REGION: us-east1
      INSTANCE_TEMPLATE_REGION: us-east1
      BOOT_DISK_SIZE: 100GB
      BOOT_DISK_TYPE: pd-balanced
      SERVICE_ACCOUNT: cloud-default-vpc-dev@fabled-equator-411703.iam.gserviceaccount.com
      SCOPES: https://www.googleapis.com/auth/cloud-platform
      GROUP_NAME: appserver-igm
      HOST: 10.0.2.3
      USERNAME: webapp
      PASSWORD: Yg4Gu0GkHDyexwYm
      DATABASE: webapp
      PORT: 8080

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
      
      # Authenticate with GCP using service account key
      - name: Set up Google Cloud SDK
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Generate timestamp
        id: timestamp
        run: echo "::set-output name=timestamp::$(date +%Y%m%d%H%M%S)"

      - name: Create instance template
        run: |
          gcloud compute instance-templates create $INSTANCE_TEMPLATE_NAME_PREFIX-${{ steps.timestamp.outputs.timestamp }} \
            --machine-type=$MACHINE_TYPE \
            --network-tier=$NETWORK_TIER \
            --image=$IMAGE \
            --network-interface="network=$NETWORK,subnet=$SUBNET,network-tier=$NETWORK_TIER" \
            --tags=$TAGS \
            --region=$REGION \
            --instance-template-region=$INSTANCE_TEMPLATE_REGION \
            --boot-disk-size=$BOOT_DISK_SIZE \
            --boot-disk-type=$BOOT_DISK_TYPE \
            --service-account=$SERVICE_ACCOUNT \
            --scopes=$SCOPES \
            --metadata=startup-script="#!/bin/bash

            # content to overwrite .env file

            SCRIPT_CONTENT=\"
            HOST=$HOST
            USER_NAME=$USERNAME
            PASSWORD=$PASSWORD
            DATABASE=$DATABASE
            PORT=$PORT
            \"

            echo \"\$SCRIPT_CONTENT\" | sudo tee /home/csye6225/webapp/webapp_develop/.env > /dev/null"
      
      - name: Configure managed instance group with new template
        run: |
          gcloud compute instance-groups managed set-instance-template $GROUP_NAME \
            --template = webapp-instance-template-${{ steps.timestamp.outputs.timestamp }} \
            --region = $REGION

      - name: Start rolling update for managed instance group
        run: |
          gcloud compute instance-groups managed rolling-action start-update $GROUP_NAME \
            --version=template=webapp-instance-template-${{ steps.timestamp.outputs.timestamp }} \
            --region = $REGION

      - name: Wait for managed instance group refresh
        run: |
          while true; do
            if gcloud compute instance-groups managed describe $GROUP_NAME --region = $REGION --format='value(status.versionTarget.isReached)'; then
              echo "Version target reached."
              break
            else
              echo "Waiting for version target to be reached..."
              sleep 30  # Adjust the interval as needed
            fi
          done
